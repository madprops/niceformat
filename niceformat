#!/usr/bin/env ruby
# This is a script to turn javascript into my personal preferred format

# Format file
def format_file(path, save)
  original = File.read(path)

  modified = original
  modified = modified.gsub(/function \(([^)]*)\)/, "(\\1) =>")
  modified = modified.gsub(/(\s*)\} else/, "\\1}\\1else")
  modified = modified.gsub(/(\s*)\} catch/, "\\1}\\1catch")
  modified = modified.gsub(/(\s*)(.*)\.then/, "\\1\\2\\1.then")
  modified = modified.gsub(/(\s*)(.*)\.catch/, "\\1\\2\\1.catch")
  modified = modified.gsub(/(?<!`)"([^"]*)"(?!`)/, "`\\1`")
  modified = modified.gsub(/\n{3,}/, "\n\n")

  if original != modified
    puts "Modified #{path}"

    if save
      File.write(path, modified)
    else
      puts modified
    end
  end
end

def main()
  # Ignore files from these places
  filters = ["/node_modules/"]

  # Only work on these extensions
  exts = [".js"]

  # Path argument with some cleanup
  if not ARGV[0]
    puts "A path argument is required."
    return
  end

  force = false
  recursion = false
  save = false

  if ARGV[1]
    if ARGV[1].include?("y")
      force = true
    end

    if ARGV[1].include?("r")
      recursion = true
    end

    if ARGV[1].include?("s")
      save = true
    end
  end

  path_arg = ARGV[0].gsub(/\/+$/, "")

  # Hold valid paths here
  valid_paths = []

  if exts.include?(File.extname(path_arg))
    valid_paths.push(path_arg)
  end

  if valid_paths.length == 0
    # Get all paths starting from path_arg
    if recursion
      p = File.join(path_arg, "**", "*")
    else
      p = File.join(path_arg, "*")
    end

    paths = Dir.glob(p).select { |e| File.file? e }

    paths.each do |path|
      if filters.any? { |x| path.include? x }
        next
      end

      if not exts.include?(File.extname(path))
        next
      end

      valid_paths.push(path)
    end
  end

  # Ask for confirmation
  puts "Format file(s) (#{valid_paths.length.to_s}) (y/n)"

  if not force
    ans = $stdin.gets.strip

    if ans != "y" and ans != "Y"
      puts "Doing nothing. Exiting."
      return
    end
  end

  # Do the actual operations
  valid_paths.each do |path|
    format_file(path, save)
  end

  puts "Done."
end

# Trap ^C
Signal.trap("INT") {
  exit
}

# Start here
if __FILE__ == $0
  main()
end